# Generated by Django 5.2.3 on 2025-07-11 11:01

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('items', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EntityCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='LegacyTrait',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('effect', models.JSONField(blank=True, default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='TacticalApproach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(help_text='e.g., Brute Force, Economic, High-Risk', max_length=50)),
                ('description', models.TextField()),
                ('effects', models.JSONField(default=dict, help_text='The detailed effects block for this approach.')),
            ],
        ),
        migrations.CreateModel(
            name='WorldEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('event_type', models.CharField(choices=[('ENVIRONMENTAL', 'Environmental Event'), ('ROAMING_BOSS', 'Roaming Boss'), ('DUNGEON_BREAK', 'Dungeon Break'), ('ZONE_SATURATION', 'Zone Saturation'), ('SPECIAL', 'Special Event')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('duration_hours', models.PositiveIntegerField(default=24)),
                ('cooldown_hours', models.PositiveIntegerField(default=72)),
                ('activation_conditions', models.JSONField(default=dict)),
                ('icon', models.CharField(blank=True, max_length=100)),
                ('map_icon', models.TextField(blank=True, help_text='SVG content for the map icon')),
            ],
        ),
        migrations.CreateModel(
            name='WorldEventEffect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('effect_type', models.CharField(choices=[('DAMAGE_MOD', 'Damage Modifier'), ('LOOT_MOD', 'Loot Modifier'), ('XP_MOD', 'XP Modifier'), ('CURRENCY_MOD', 'Currency Modifier'), ('SPAWN_MOD', 'Spawn Modifier'), ('ENVIRONMENT', 'Environmental Effect'), ('SPECIAL', 'Special Effect')], max_length=20)),
                ('parameters', models.JSONField(default=dict)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='WorldZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('world_map_x', models.PositiveIntegerField(default=0, help_text='Position on the main world map.')),
                ('world_map_y', models.PositiveIntegerField(default=0, help_text='Position on the main world map.')),
                ('background_image', models.ImageField(blank=True, help_text='1920x1080 background image for the zone.', null=True, upload_to='zone_backgrounds/')),
                ('is_saturated', models.BooleanField(default=False)),
                ('is_infested', models.BooleanField(default=False)),
                ('saturation_expires_at', models.DateTimeField(blank=True, null=True)),
                ('rank_pool', models.JSONField(blank=True, default=list, help_text='A list of ranks that can spawn in this zone, e.g., ["E", "D"]')),
            ],
        ),
        migrations.CreateModel(
            name='Dungeon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('rank', models.CharField(choices=[('E', 'E-Rank'), ('D', 'D-Rank'), ('C', 'C-Rank'), ('B', 'B-Rank'), ('A', 'A-Rank'), ('S', 'S-Rank'), ('SS', 'SS-Rank'), ('SSS', 'SSS-Rank'), ('National', 'National-Rank')], default='E', max_length=13)),
                ('min_level', models.PositiveIntegerField(default=1)),
                ('max_level', models.PositiveIntegerField(default=100)),
                ('tags', models.JSONField(blank=True, default=list, help_text='e.g., ["Cave", "Undead", "Cursed"]')),
                ('is_active', models.BooleanField(default=True)),
                ('zone_map_x', models.PositiveIntegerField(default=0, help_text="Position within the zone's 1920x1080 map.")),
                ('zone_map_y', models.PositiveIntegerField(default=0, help_text="Position within the zone's 1920x1080 map.")),
                ('icon', models.ImageField(blank=True, null=True, upload_to='dungeon_icons/')),
                ('instability_level', models.PositiveIntegerField(default=0, help_text='0-100, triggers anomaly at 100')),
                ('anomaly_state', models.CharField(blank=True, help_text='e.g., "Swarm", "Elite", "Volatile"', max_length=50)),
                ('anomaly_active_until', models.DateTimeField(blank=True, null=True)),
                ('item_categories', models.ManyToManyField(help_text='The item categories that can drop in this dungeon.', related_name='dungeons', to='items.itemcategory')),
                ('entity_categories', models.ManyToManyField(help_text='The entity categories that can spawn in this dungeon.', related_name='dungeons', to='dungeons.entitycategory')),
                ('world_events', models.ManyToManyField(blank=True, help_text='Events that can trigger in this dungeon', to='dungeons.worldevent')),
                ('zone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dungeons', to='dungeons.worldzone')),
            ],
        ),
        migrations.CreateModel(
            name='DungeonRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('advancing', 'Advancing'), ('encounter_resolved', 'Encounter Resolved'), ('floor_completed', 'Floor Completed'), ('completed', 'Completed'), ('failed', 'Failed'), ('abandoned', 'Abandoned')], default='not_started', max_length=20)),
                ('anima', models.PositiveIntegerField(default=3, help_text="The player's remaining lives for this expedition.")),
                ('current_floor', models.PositiveIntegerField(default=1)),
                ('current_encounter_index', models.PositiveIntegerField(default=0)),
                ('floor_completion_time', models.DateTimeField(blank=True, null=True)),
                ('total_floors', models.PositiveIntegerField(default=1)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('rewards', models.JSONField(default=dict, help_text='All rewards for this run')),
                ('tactical_approach_log', models.JSONField(blank=True, default=list, help_text='A log of the tactical choices made by the player.')),
                ('encounter_log', models.JSONField(blank=True, default=list, help_text='A detailed log of each encounter.')),
                ('unclaimed_rewards', models.JSONField(blank=True, default=list, help_text='A list of rewards that have not yet been claimed by the player.')),
                ('last_floor_results', models.JSONField(blank=True, default=dict, help_text='DEPRECATED: The results of the most recently completed floor.')),
                ('last_encounter_result', models.JSONField(blank=True, default=dict, help_text='The result of the most recently resolved encounter.')),
                ('active_modifiers', models.JSONField(blank=True, default=list, help_text='A list of active modifiers from tactical approaches.')),
                ('provisions_used', models.JSONField(blank=True, default=list, help_text='List of provision item IDs used for this run')),
                ('critical_events', models.JSONField(blank=True, default=list, help_text='List of critical events (with status/choices) for this run')),
                ('anomaly_state', models.CharField(blank=True, help_text='e.g., "Swarm", "Elite", "Volatile"', max_length=50)),
                ('dungeon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='dungeons.dungeon')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dungeon_runs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('rank', models.CharField(choices=[('E', 'E-Rank'), ('D', 'D-Rank'), ('C', 'C-Rank'), ('B', 'B-Rank'), ('A', 'A-Rank'), ('S', 'S-Rank'), ('SS', 'SS-Rank'), ('SSS', 'SSS-Rank'), ('National', 'National-Rank')], default='E', max_length=13)),
                ('entity_type', models.CharField(choices=[('minion', 'Minion'), ('boss', 'Boss'), ('final_boss', 'Final Boss')], default='minion', max_length=20)),
                ('image_url', models.URLField(blank=True, help_text='Frontend image or identifier', null=True)),
                ('power', models.PositiveIntegerField(default=1, help_text='The numerical power level of the entity.')),
                ('min_xp', models.PositiveIntegerField(default=10, help_text='Minimum XP gained for defeating this entity.')),
                ('max_xp', models.PositiveIntegerField(default=20, help_text='Maximum XP gained for defeating this entity.')),
                ('min_coins', models.PositiveIntegerField(default=5, help_text='Minimum coins dropped by this entity.')),
                ('max_coins', models.PositiveIntegerField(default=15, help_text='Maximum coins dropped by this entity.')),
                ('description', models.TextField(blank=True)),
                ('tags', models.JSONField(blank=True, default=list, help_text='List of tags for quest/objective detection, e.g., ["goblin", "beast"]')),
                ('loot_categories', models.ManyToManyField(blank=True, help_text='The item categories that can drop from this entity.', related_name='entities', to='items.itemcategory')),
                ('categories', models.ManyToManyField(help_text='The categories this entity belongs to.', related_name='entities', to='dungeons.entitycategory')),
            ],
        ),
        migrations.CreateModel(
            name='HallOfFame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement', models.CharField(max_length=255)),
                ('date_earned', models.DateTimeField(auto_now_add=True)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hall_of_fame_entries', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MarketplaceListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.PositiveIntegerField()),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='items.item')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlayerDungeonState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_anima', models.PositiveIntegerField(default=3, help_text="Player's maximum Anima.")),
                ('daily_gates_entered', models.PositiveIntegerField(default=0)),
                ('last_daily_reset', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dungeon_state', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ShopItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost_game_coin', models.PositiveIntegerField(default=0)),
                ('cost_club_coin', models.PositiveIntegerField(default=0)),
                ('stock', models.PositiveIntegerField(default=100)),
                ('is_hunter_supply', models.BooleanField(default=False)),
                ('is_club_store', models.BooleanField(default=False)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='items.item')),
            ],
        ),
        migrations.CreateModel(
            name='Talent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('tree', models.CharField(max_length=50)),
                ('max_rank', models.PositiveIntegerField(default=5)),
                ('rank_bonuses', models.JSONField(default=list)),
                ('required_rank', models.CharField(choices=[('E', 'E-Rank'), ('D', 'D-Rank'), ('C', 'C-Rank'), ('B', 'B-Rank'), ('A', 'A-Rank'), ('S', 'S-Rank'), ('SS', 'SS-Rank'), ('SSS', 'SSS-Rank'), ('National', 'National-Rank')], default='E', max_length=13)),
                ('required_talents', models.ManyToManyField(blank=True, to='dungeons.talent')),
            ],
        ),
        migrations.CreateModel(
            name='EventEffectApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameters', models.JSONField(default=dict)),
                ('weight', models.PositiveIntegerField(default=1)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dungeons.worldevent')),
                ('effect', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dungeons.worldeventeffect')),
            ],
            options={
                'unique_together': {('event', 'effect')},
            },
        ),
        migrations.AddField(
            model_name='worldevent',
            name='effects',
            field=models.ManyToManyField(through='dungeons.EventEffectApplication', to='dungeons.worldeventeffect'),
        ),
        migrations.CreateModel(
            name='EventTriggerHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('triggered_at', models.DateTimeField(auto_now_add=True)),
                ('triggered_by', models.CharField(max_length=50)),
                ('details', models.JSONField(default=dict)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dungeons.worldevent')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dungeons.worldzone')),
            ],
        ),
        migrations.CreateModel(
            name='ActiveWorldEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField()),
                ('current_state', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dungeons.worldevent')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dungeons.worldzone')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerGate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.DateField(auto_now_add=True)),
                ('map_x', models.PositiveIntegerField()),
                ('map_y', models.PositiveIntegerField()),
                ('is_completed', models.BooleanField(default=False)),
                ('is_lost', models.BooleanField(default=False)),
                ('total_floors', models.PositiveIntegerField()),
                ('encounter_log', models.JSONField(default=list)),
                ('dungeon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_gates', to='dungeons.dungeon')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_gates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'dungeon', 'day')},
            },
        ),
        migrations.CreateModel(
            name='PlayerScoutingData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage', models.PositiveIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('dungeon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scouting_data', to='dungeons.dungeon')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scouting_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'dungeon')},
            },
        ),
        migrations.CreateModel(
            name='UserLegacyTrait',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_earned', models.DateTimeField(auto_now_add=True)),
                ('trait', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='dungeons.legacytrait')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='legacy_traits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'trait')},
            },
        ),
        migrations.CreateModel(
            name='UserTalent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField(default=1)),
                ('talent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='dungeons.talent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='talents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'talent')},
            },
        ),
    ]
